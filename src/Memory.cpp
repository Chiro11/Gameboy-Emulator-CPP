#include "Memory.h"
using namespace std;

const int BIOS[0x100] = {
    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
};

Memory::Memory() {
    memset(mmu, 0, sizeof(mmu));
    ram.assign(0x8000, 0);
    mbcType = mbcMode = ramBank = 0;
    romBank = 1;
}

//Load ROM by the given filename
bool Memory::loadRom(string& romName) {
    ifstream fRom(romName, ios::binary);
    if(!fRom.is_open())
        return false;
    rom.assign(istreambuf_iterator<char>(fRom), istreambuf_iterator<char>());
    mbcType = rom[0x0147];
    return true;
}

//Read one byte(8-bit) from the given address
int Memory::readByte(int addr) {
    unsigned char val = 0;
    if(addr<=0x3FFF)
        val = rom[addr];
    else if(addr<=0x7FFF)
        val = rom[addr-0x4000+romBank*0x4000];
    else if(addr<=0x9FFF)
        val = mmu[addr-0x8000];
    else if(addr<=0xBFFF)
        val = ram[addr-0xA000+ramBank*0x2000];
    else if(addr==0xFF00) {
        val = mmu[0xFF00-0x8000];
        switch((val>>4)&3) {
            case 1: val |= key.getKey(0); break;
            case 2: val |= key.getKey(1); break;
        }
    }
    else if(addr==0xFF04)
        val = timer.getDivider();
    else
        val = mmu[addr-0x8000];
    return static_cast<int>(val);
}

//Write one byte(8-bit) to the given address
void Memory::writeByte(int addr, int val) {
    //Memory Bank Controller
    if(addr>=0x2000 && addr<=0x7FFF && mbcType>=1) {
        if(addr<=0x3FFF)
            romBank = (romBank&0x60)+max(val&0x1F, 1);
        else if(addr<=0x5FFF) {
            if(mbcMode && mbcType>=2)
                ramBank = val&0x03;
            else
                romBank = (romBank&0x1F)+(val&0x03)*32;
        }
        else if(addr<=0x7FFF && mbcType>=2)
            mbcMode = val&0x01;
    }
    else if(addr>=0x8000) {
        if(addr<=0x9FFF)
            mmu[addr-0x8000] = static_cast<unsigned char>(val);
        else if(addr<=0xBFFF)
            ram[addr-0xA000+ramBank*0x2000] = static_cast<unsigned char>(val);
        else if(addr==0xFF04)
            timer.dividerReset();
        else
            mmu[addr-0x8000] = static_cast<unsigned char>(val);
    }
}

//Read one word(16-bit) from the given address
int Memory::readWord(int addr) {
    return readByte(addr)+(readByte(addr+1)<<8);
}

//Write one word(16-bit) from the given address
void Memory::writeWord(int addr, int val) {
    writeByte(addr, val&0xFF);
    writeByte(addr+1, val>>8);
}
